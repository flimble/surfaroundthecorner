"use strict";var ApplicationConfiguration=function(){var applicationModuleName="SurfAroundTheCorner",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils","ui.select","ngLodash","ngFitText"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("users"),ApplicationConfiguration.registerModule("waves"),angular.module("articles").run(["Menus",function(Menus){}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$httpProvider",function($httpProvider){$httpProvider.defaults.useXDomain=!0,delete $httpProvider.defaults.headers.common["X-Requested-With"]}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.defaults.useXDomain=!0,delete $httpProvider.defaults.headers.common["X-Requested-With"],$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("register",{url:"/register",templateUrl:"modules/users/views/authentication/register.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]),angular.module("waves").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Waves","waves","dropdown","/waves(/create)?"),Menus.addSubMenuItem("topbar","waves","All","waves"),Menus.addSubMenuItem("topbar","waves","By Region","waves-by-region"),Menus.addSubMenuItem("topbar","waves","Create New","waves/create")}]),angular.module("waves").config(["$stateProvider",function($stateProvider){$stateProvider.state("listWaves",{url:"/waves",templateUrl:"modules/waves/views/list-waves.client.view.html"}).state("createWave",{url:"/waves/create",templateUrl:"modules/waves/views/create-wave.client.view.html"}).state("viewWave",{url:"/waves/:waveId",templateUrl:"modules/waves/views/view-wave.client.view.html"}).state("editWave",{url:"/waves/:waveId/edit",templateUrl:"modules/waves/views/edit-wave.client.view.html"}).state("byregionWave",{url:"/waves-by-region",templateUrl:"modules/waves/views/findmynearest-waves.client.view.html"})}]),angular.module("waves").controller("WavesController",["$scope","$stateParams","$location","Waves","lodash","googleApiProvider",function($scope,$stateParams,$location,Waves,lodash,googleApiProvider){$scope.swell={},$scope.swell.availableCompassDirections=["NorthEast","East","SouthEast","South"],$scope.swell.compassDirectionsSelected=[],$scope.wind={},$scope.wind.availableCompassDirections=["North","NorthEast","East","SouthEast","South","SouthWest","West","NorthWest"],$scope.wind.compassDirectionsSelected=[],$scope.location={},$scope.location.availableLocations=[{name:"CentralCoast",state:"New South Wales"},{name:"SydneyNorth",state:"New South Wales"},{name:"SydneySouth",state:"New South Wales"},{name:"SouthCoast",state:"New South Wales"},{name:"Somewhere",state:"Queensland"}],$scope.location.selected={},$scope.location.availableLocationsStateGroupBy=function(item){return item.state},$scope.createWave={},$scope.createWave.SwellDirection=[],$scope.createWave.WindDirection=[],$scope.create=function(){var wave=new Waves({Name:this.Name,CountryCode:this.CountryCode,Experience:this.Experience,Quality:this.Quality,Region:this.Region,State:this.State,SwellDirection:$scope.createWave.SwellDirection,SwellSize:this.SwellSize,TideMovement:this.TideMovement,TidePosition:this.TidePosition,WindDirection:$scope.createWave.WindDirection,WaveType:this.WaveType,WaveDirection:this.WaveDirection});wave.$save(function(response){$location.path("waves/"+response._id),$scope.createWave.SwellDirection=[],$scope.createWave.WindDirection=[]},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(wave){if(wave){wave.$remove();for(var i in $scope.waves)$scope.waves[i]===wave&&$scope.waves.splice(i,1)}else $scope.wave.$remove(function(){$location.path("waves")})},$scope.update=function(){var wave=$scope.wave;wave.$update(function(){$location.path("waves/"+wave._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.waves=Waves.query()},$scope.findByConditions=function(region,swellDirection,windDirection){Waves.query().$promise.then(function(data){var selectedWaves=[];data.forEach(function(item){region.name.length>0&&region.name!==item.Region||0!=item.SwellDirection.length&&0!=item.SwellDirection.length&&(swellDirection.length>0&&0==lodash.intersection(swellDirection,item.SwellDirection)||0!=item.WindDirection.length&&0!=item.WindDirection[0].length&&(windDirection.length>0&&0==lodash.intersection(windDirection,item.WindDirection)||selectedWaves.push(item)))}),$scope.waves=selectedWaves})},$scope.join=function(a){return a.join(",")},$scope.locations=function(){var destinations=["Vancouver BC","Seattle"];destinations.join("|"),googleApiProvider.distanceMatrix.bla()},$scope.splitCamelCaseToString=function(s){return s.split(/(?=[A-Z])/).map(function(p){return p.charAt(0).toUpperCase()+p.slice(1)}).join(" ")},$scope.findOne=function(){$scope.wave=Waves.get({waveId:$stateParams.waveId})}}]),angular.module("waves").factory("googleApiProvider",["$resource","$http",function($resource,$http){var gapiBaseUrl="https://maps.googleapis.com/maps/api",apiKey="AIzaSyCSBGw0kiu_Nv3dPOBxxanMjuDyjEVA3aY";return{distanceMatrix:$resource("maps/distancematrix",{},{query:{method:"GET",params:{API_KEY:apiKey},isArray:!1,headers:{"Access-Control-Allow-Origin":"*","Access-Control-Allow-Credentials":!0}}}),distanceGet:function(){var dat;return $http.jsonp(gapiBaseUrl+"/distancematrix/json?origins=Seattle&destinations=Sydney&callback=angular.callbacks._0").success(function(data){console.log("1"),console.log(data),dat=data}).error(function(data){alert("ERROR: Could not get data.")}),console.log("2"),console.log(dat),dat}}}]),angular.module("waves").factory("Waves",["$resource",function($resource){return $resource("waves/:waveId",{waveId:"@_id"},{update:{method:"PUT"}})}]);